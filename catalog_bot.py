import logging
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.dispatcher.filters import Command

API_TOKEN = '7802876030:AAHzr5E3g1lIzhGrvB0stDzQjzvhYa8I1bw'
ADMIN_USERNAME = '@048goatt'
ADMIN_ID = 6803198967  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–µ–µ

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CATEGORIES = ["–°—É–º–∫–∏", "–û–±—É–≤—å", "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–®—Ç–∞–Ω—ã", "–®–æ—Ä—Ç—ã", "–§—É—Ç–±–æ–ª–∫–∏", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
DATA_FILE = 'catalog.json'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
temp_storage = {}

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}") for cat in CATEGORIES]
    kb.add(*buttons)
    return kb

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å"
def order_button(cat, idx):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{cat}_{idx}")
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
def load_catalog():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {cat: [] for cat in CATEGORIES}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
def save_catalog(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME.lstrip("@"):
        await message.answer("–î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return

    file_id = message.photo[-1].file_id
    temp_storage[message.from_user.id] = {"photo": file_id}
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    if message.from_user.username != ADMIN_USERNAME.lstrip("@"):
        await message.answer("–î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return

    if user_id in temp_storage and "photo" in temp_storage[user_id]:
        temp_storage[user_id]["description"] = message.text
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    else:
        await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")

@dp.callback_query_handler(lambda c: c.data.startswith('cat_'))
async def handle_category(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    category = callback_query.data.split("_", 1)[1]

    if user_id not in temp_storage:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        return

    catalog = load_catalog()
    item = temp_storage.pop(user_id)
    catalog[category].append(item)
    save_catalog(catalog)

    await callback_query.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úÖ")

@dp.message_handler(commands=['–∫–∞—Ç–∞–ª–æ–≥'])
async def show_catalog(message: types.Message):
    catalog = load_catalog()
    kb = InlineKeyboardMarkup(row_width=2)
    for cat in CATEGORIES:
        kb.add(InlineKeyboardButton(text=cat, callback_data=f"show_{cat}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('show_'))
async def show_category_items(callback_query: types.CallbackQuery):
    category = callback_query.data.split("_", 1)[1]
    catalog = load_catalog()
    items = catalog.get(category, [])
    if not items:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    for idx, item in enumerate(items):
        await callback_query.message.answer_photo(
            photo=item["photo"],
            caption=item["description"],
            reply_markup=order_button(category, idx)
        )

@dp.callback_query_handler(lambda c: c.data.startswith('order_'))
async def handle_order(callback_query: types.CallbackQuery):
    _, cat, idx = callback_query.data.split("_")
    idx = int(idx)
    catalog = load_catalog()
    item = catalog[cat][idx]

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑:
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}
–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}
–û—Ç: @{callback_query.from_user.username}"
    )
    await bot.send_photo(
        ADMIN_ID,
        photo=item["photo"]
    )
    await callback_query.message.answer("üì© –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –∫ –ø—Ä–æ–¥–∞–≤—Ü—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
    await callback_query.message.answer(f"https://t.me/{ADMIN_USERNAME.lstrip('@')}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
